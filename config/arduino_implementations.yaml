# Arduino Random Number Generator Implementations
# 최대 20개의 다양한 구현 방식을 정의할 수 있습니다.
# 각 구현은 고유한 ID, 이름, 설명, 그리고 코드 로직을 가집니다.

implementations:
  
  # 1. 룩업 테이블 방식 (현재 기본)
  - id: "lookup_table_v1"
    name: "Lookup Table v1"
    description: "3x3 룩업 테이블을 사용한 기본 구현"
    type: "lookup_table"
    enabled: true
    lookup_table:
      - [1, 1, 2]  # 이전이 0일 때
      - [0, 0, 2]  # 이전이 1일 때
      - [0, 1, 0]  # 이전이 2일 때
    expected_performance: "high"
    memory_usage: "low"
    
  # 2. 개선된 룩업 테이블
  - id: "lookup_table_v2"
    name: "Optimized Lookup Table"
    description: "메모리 효율성을 개선한 룩업 테이블"
    type: "lookup_table"
    enabled: true
    lookup_table:
      - [2, 1, 1]  # 다른 패턴 시도
      - [2, 0, 0]
      - [1, 0, 1]
    expected_performance: "high"
    memory_usage: "low"
    
  # 3. If-Else 체인 방식
  - id: "if_else_chain"
    name: "If-Else Chain"
    description: "조건문 체인을 사용한 구현"
    type: "conditional"
    enabled: true
    logic: |
      if previous == 0:
          if candidate == 0: return 1
          elif candidate == 1: return 1
          else: return 2
      elif previous == 1:
          if candidate == 0: return 0
          elif candidate == 1: return 0
          else: return 2
      else:  # previous == 2
          if candidate == 0: return 0
          elif candidate == 1: return 1
          else: return 0
    expected_performance: "medium"
    memory_usage: "very_low"
    
  # 4. Switch-Case 스타일 (Python dict 사용)
  - id: "switch_case"
    name: "Switch-Case Style"
    description: "딕셔너리를 사용한 switch-case 스타일"
    type: "dictionary"
    enabled: true
    mapping:
      "0,0": 1
      "0,1": 1
      "0,2": 2
      "1,0": 0
      "1,1": 0
      "1,2": 2
      "2,0": 0
      "2,1": 1
      "2,2": 0
    expected_performance: "high"
    memory_usage: "medium"
    
  # 5. 수학적 공식 기반
  - id: "mathematical"
    name: "Mathematical Formula"
    description: "수학적 공식을 사용한 계산"
    type: "formula"
    enabled: true
    formula: "(previous + candidate * 2) % 3"
    expected_performance: "very_high"
    memory_usage: "very_low"
    
  # 6. 비트 연산 기반
  - id: "bitwise"
    name: "Bitwise Operations"
    description: "비트 연산을 활용한 고속 구현"
    type: "bitwise"
    enabled: true
    logic: |
      # 비트 연산으로 빠른 계산
      result = (previous ^ candidate) & 0x3
      if result == previous:
          result = (result + 1) % 3
      return result
    expected_performance: "very_high"
    memory_usage: "very_low"
    
  # 7. 랜덤 재시도 방식
  - id: "retry_method"
    name: "Retry Method"
    description: "같은 숫자가 나올 때까지 재시도"
    type: "retry"
    enabled: true
    max_retries: 10
    logic: |
      for i in range(max_retries):
          candidate = random(0, 3)
          if candidate != previous:
              return candidate
      return (previous + 1) % 3  # fallback
    expected_performance: "low"
    memory_usage: "very_low"
    
  # 8. 가중치 기반
  - id: "weighted"
    name: "Weighted Selection"
    description: "이전 숫자에 따른 가중치 적용"
    type: "weighted"
    enabled: true
    weights:
      0: [0, 50, 50]  # 이전이 0일 때 [0%, 50%, 50%]
      1: [50, 0, 50]  # 이전이 1일 때 [50%, 0%, 50%]
      2: [50, 50, 0]  # 이전이 2일 때 [50%, 50%, 0%]
    expected_performance: "medium"
    memory_usage: "medium"
    
  # 9. 순환 패턴
  - id: "circular_pattern"
    name: "Circular Pattern"
    description: "순환 패턴을 사용한 예측 가능한 구현"
    type: "pattern"
    enabled: true
    pattern: [0, 1, 2, 1, 0, 2]  # 반복 패턴
    expected_performance: "very_high"
    memory_usage: "low"
    
  # 10. 하이브리드 방식
  - id: "hybrid"
    name: "Hybrid Approach"
    description: "여러 방식을 조합한 하이브리드"
    type: "hybrid"
    enabled: true
    primary_method: "lookup_table"
    fallback_method: "mathematical"
    switch_probability: 0.1
    expected_performance: "high"
    memory_usage: "medium"

# 테스트 설정
test_config:
  default_iterations: 10000
  default_seed: 12345
  performance_benchmark_iterations: 50000
  statistical_significance_threshold: 0.05
  
# 비교 메트릭
comparison_metrics:
  - "generation_speed"      # 생성 속도 (gen/sec)
  - "memory_usage"         # 메모리 사용량
  - "distribution_quality" # 분포 균등성
  - "constraint_compliance" # 제약 조건 준수
  - "code_complexity"      # 코드 복잡도
  - "arduino_compatibility" # Arduino 호환성

# 추천 시스템 가중치
recommendation_weights:
  performance: 0.3
  memory_efficiency: 0.2
  code_simplicity: 0.2
  reliability: 0.2
  maintainability: 0.1